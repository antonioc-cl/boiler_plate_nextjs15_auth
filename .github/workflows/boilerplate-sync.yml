name: Boilerplate Sync

on:
  schedule:
    # Run every Sunday at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-framework-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.12.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Check for Next.js updates
        id: check-nextjs
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').dependencies.next")
          LATEST_VERSION=$(npm view next version)
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "latest=$LATEST_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "update_available=true" >> $GITHUB_OUTPUT
          else
            echo "update_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for major dependency updates
        run: |
          # Create a report of available updates
          echo "# Dependency Update Report" > update-report.md
          echo "Generated on $(date)" >> update-report.md
          echo "" >> update-report.md

          # Check major dependencies
          for pkg in "next" "react" "react-dom" "typescript" "better-auth" "drizzle-orm" "@playwright/test" "vitest"; do
            CURRENT=$(node -p "require('./package.json').dependencies['$pkg'] || require('./package.json').devDependencies['$pkg'] || 'Not installed'")
            LATEST=$(npm view $pkg version 2>/dev/null || echo "Error fetching version")
            echo "- **$pkg**: $CURRENT â†’ $LATEST" >> update-report.md
          done

      - name: Create issue if updates available
        if: steps.check-nextjs.outputs.update_available == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('update-report.md', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸ”„ Framework updates available',
              body: report + '\n\n---\n*This issue was automatically created by the boilerplate sync workflow.*',
              labels: ['maintenance', 'dependencies']
            });

  sync-github-actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update GitHub Actions
        uses: actions/github-script@v8
        with:
          script: |
            const { readFileSync, writeFileSync, readdirSync } = require('fs');
            const { join } = require('path');

            const workflowsDir = '.github/workflows';
            const files = readdirSync(workflowsDir);
            let updated = false;

            for (const file of files) {
              if (!file.endsWith('.yml') && !file.endsWith('.yaml')) continue;
              
              const filePath = join(workflowsDir, file);
              let content = readFileSync(filePath, 'utf8');
              const originalContent = content;
              
              // Update action versions
              content = content.replace(/uses: actions\/checkout@v\d+/g, 'uses: actions/checkout@v4');
              content = content.replace(/uses: actions\/setup-node@v\d+/g, 'uses: actions/setup-node@v4');
              content = content.replace(/uses: actions\/cache@v\d+/g, 'uses: actions/cache@v4');
              content = content.replace(/uses: actions\/upload-artifact@v\d+/g, 'uses: actions/upload-artifact@v4');
              content = content.replace(/uses: actions\/download-artifact@v\d+/g, 'uses: actions/download-artifact@v4');
              
              if (content !== originalContent) {
                writeFileSync(filePath, content);
                updated = true;
                console.log(`Updated ${file}`);
              }
            }

            return updated;

      - name: Create PR if actions were updated
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update GitHub Actions to latest versions'
          title: 'ðŸ”„ Update GitHub Actions'
          body: |
            ## ðŸ¤– Automated GitHub Actions Update

            This PR updates GitHub Actions to their latest versions.

            ### Changes
            - Updated action versions to latest stable releases
            - Ensured compatibility across all workflows

            ---
            *This PR was automatically created by the boilerplate sync workflow.*
          branch: actions/update-versions
          delete-branch: true
          labels: |
            maintenance
            automated
